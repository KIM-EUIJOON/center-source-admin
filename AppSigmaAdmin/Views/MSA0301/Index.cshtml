@model AppSigmaAdmin.Models.AuthIpAddressEntityList
@using AppSigmaAdmin.Utility
@using AppSigmaAdmin.Library

@section style {
    <style>
        input[type="submit"].accent-color-button,
        input[type="button"].accent-color-button,
        accent-color-button {
            width: 300px;
        }

        input[type="text"].std-textbox,
        input[type="password"].std-textbox {
            width: 250px;
        }
    </style>
}

@Scripts.RenderFormat(BundleHtmlTag.ScriptTag, "~/bundles/jquery/MSA0301")


@section funcTitle {
    <div class="funcTitleBer">
        システム管理者機能
    </div>
}

<input type="hidden" id="UpdateFlag" value="@ViewBag.IpUpdate" />
<input type="hidden" id="IpDelete" value="@Common.CreateUrl("/MSA0301/IpDelete", false)" />
<input type="hidden" id="IpAdd" value="@Common.CreateUrl("/MSA0301/Add", false)" />
<input type="hidden" id="CreateUrl" value="@Common.CreateUrl("/MSA0301", false)" />

<form action="@Common.CreateUrl("/MSA0301", false)" method="post">
    <div class="ContentsBase">
        <div class="menuBox">
            <div>
                <input type="button" value="IPアドレス新規追加" class="accent-color-button" style="margin-bottom:10px" onclick="IPListSet()" />
            </div>
            <div class="errorMessage">
                @Html.ValidationSummary(false, "")
            </div>
            @{
                //window.loadがうまくいかない問題対応(仮)
                if (ViewBag.IpUpdate == 1)
                {
                    <div class="errorMessage">
                        @Html.Label("リストの更新に成功しました。")
                    </div>
                }
                else if (ViewBag.IpUpdate == 2)
                {
                    <div class="errorMessage">
                        @Html.Label("リストの更新に失敗しました。")
                    </div>
                }
            }
        </div>
        @{
            if (Model != null)
            {

                @*表示件数：10件*@
                var grid = new WebGrid(null, canSort: false, canPage: false);
                grid.Bind(source: Model.IPAddressList);


                <div class="grid-table">
                    @grid.GetHtml(tableStyle: "gridTable", headerStyle: "gridhead",
                        columns: grid.Columns(grid.Column("NetAddress", header: "ネットアドレス", style: "gridbody14"),

                        grid.Column("IPAddressName", header: "IPアドレス名", style: "gridbody12"),
                        grid.Column("CreateDate", header: "作成日時", style: "gridbody18"), grid.Column("UpdateDate", header: "更新日時", style: "gridbody18"),
                        grid.Column("編集", style: "gridbody8",format:(item)=> { return new HtmlString("<input type='button' value ='編集' id='ListEdit' onclick='IPListEdit(\"" + item.NetAddress + "\",\"" + item.IPAddressName + "\",\"" + item.NetAddress + "\")' /><input type='button' value ='削除' id='ListDelete' onclick='IPListDelete(\"" + item.NetAddress + "\");' />"); }))
                        )

                </div>

            }
        }
    </div>
</form>

<div id="dialog">
    <form action="@Common.CreateUrl("/MSA0301/Edit", false)" method="post" id="Edit">
        <div>
            <label>ネットアドレス：</label>
            @Html.TextBoxFor(m => m.NetAddress, new { id = "NetAdd", autocomplete = "off", Class = "std-textbox" })
        </div>
        <br />
        <div>
            <label>IPアドレス名　：</label>
            @Html.TextBoxFor(m => m.IPAddressName, new { id = "IPAddName", autocomplete = "off", Class = "std-textbox" })
        </div>


        <div>
            @Html.HiddenFor(m => m.BeforeNetAddress, new { id = "BeforeNetAdd", autocomplete = "off", Class = "std-textbox" })
        </div>

        <br />
    </form>
</div>
